#include <stdio.h>
#include <stdint.h>

// Define PC-1 and PC-2 permutations (simplified example values)
int pc1[56] = {57, 49, 41, 33, 25, 17, 9, 1,
               58, 50, 42, 34, 26, 18, 10, 2,
               59, 51, 43, 35, 27, 19, 11, 3,
               60, 52, 44, 36, 63, 55, 47, 39,
               31, 23, 15, 7, 62, 54, 46, 38,
               30, 22, 14, 6, 61, 53, 45, 37,
               29, 21, 13, 5, 28, 20, 12, 4};

int pc2[48] = {14, 17, 11, 24, 1, 5, 3, 28,
               15, 6, 21, 10, 23, 19, 12, 4,
               26, 8, 16, 7, 27, 20, 13, 2,
               41, 52, 31, 37, 47, 55, 30, 40,
               51, 45, 33, 48, 44, 49, 39, 56,
               34, 53, 46, 42, 50, 36, 29, 32};

// Key rotations
int shifts[16] = {1, 1, 2, 2, 2, 2, 2, 2,
                   1, 2, 2, 2, 2, 2, 2, 1};

// Apply a permutation to a 64-bit block
uint64_t permute(uint64_t block, int* permutation, int size) {
    uint64_t permuted = 0;
    for (int i = 0; i < size; i++) {
        int bit = (block >> (64 - permutation[i])) & 1;
        permuted |= (bit << (63 - i));
    }
    return permuted;
}

// Perform left circular rotation on a 28-bit block
uint32_t rotate_left(uint32_t value, int shifts) {
    return (value << shifts) | (value >> (28 - shifts));
}

// Key scheduling function
void key_schedule(uint64_t key, uint64_t subkeys[16]) {
    // Apply PC-1 to the key
    uint64_t permuted_key = permute(key, pc1, 56);

    // Split into two 28-bit halves
    uint32_t c = permuted_key >> 28;
    uint32_t d = permuted_key & 0xFFFFFFF;

    for (int round = 0; round < 16; round++) {
        // Rotate C and D
        c = rotate_left(c, shifts[round]);
        d = rotate_left(d, shifts[round]);

        // Combine C and D and apply PC-2 to get subkey
        uint64_t combined = ((uint64_t)c << 28) | d;
        subkeys[round] = permute(combined, pc2, 48);
    }
}

int main() {
    uint64_t key = 0x133457799BBCDFF1; // Example key
    uint64_t subkeys[16];

    key_schedule(key, subkeys);

    // Print the generated subkeys
    for (int i = 0; i < 16; i++) {
        printf("Subkey %2d: %016llX\n", i + 1, subkeys[i]);
    }

    return 0;
}
